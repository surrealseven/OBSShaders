// Template for new shaders

// view/projection matrix
uniform float4x4 ViewProj;

// source image texture
uniform texture2d image;

// time in seconds since the filter was created
uniform float elapsed_time;

// random float represneting the local time
uniform float local_time;

// count of how many times the shader has rendered a page
uniform int loops;

// per frame random number between 0 and 1
uniform float rand_f;

// per activation, load, or change of settings random number between 0 and 1
uniform float rand_activation_f;

// per instance on load random number between 0 and 1
uniform float rand_instance_f;

// size in uv coordinates of each texel (inverse of uv_size)
uniform float2 uv_pixel_interval;

// width and height in pixels of the screen
uniform float2 uv_size;



uniform float ExampleVariable <
    string label = "Example Variable";
    string widget_type = "slider";
    float minimum = 0.0;
    float maximum = 1.0;
    float step = 0.01;
> = 0.0;

uniform string ExampleNote <
    string widget_type = "info";
> ='This is a note presented to the user.';

sampler_state textureSampler 
{
	Filter    = Linear;
	AddressU  = Border;
	AddressV  = Border;
	BorderColor = 00000000;
};

struct VertData
{
	float4 pos : POSITION;
	float2 uv : TEXCOORD0;
};

struct PixelData
{
	float4 pos : POSITION;
	float2 uv : TEXCOORD0;
};


float4 mainImage(PixelData v_in) : TARGET
{
	float4 color = image.Sample(textureSampler, v_in.uv);

	return color;
}


// offset which should be applied to the uv coordinates of the vertices
uniform float2 uv_offset;

// scale which should be applied to the uv coordinates of the vertices
uniform float2 uv_scale;

PixelData mainTransform(VertData v_in)
{
	PixelData vert_out;
	vert_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv = v_in.uv * uv_scale + uv_offset;
	return vert_out;
}

technique Draw
{
	pass
	{
		vertex_shader = mainTransform(v_in);
		pixel_shader = mainImage(v_in);
	}
}




