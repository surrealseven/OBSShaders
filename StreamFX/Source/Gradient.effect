// include filter shader variables
#include "SrlSourceEffect.h"


uniform float4 Color1 <
	string name = "Color 1";
	string field_type = "slider";
	float4 minimum = { 0.0, 0.0, 0.0, 0.0 };
	float4 maximum = { 1.0, 1.0, 1.0, 1.0 };
> = { 1, 1, 1, 1 };

uniform float4 Color2 <
	string name = "Color 2";
	string field_type = "slider";
	float4 minimum = { 0.0, 0.0, 0.0, 0.0 };
	float4 maximum = { 1.0, 1.0, 1.0, 1.0 };
> = { 1, 1, 1, 1 };

uniform float4 Color3 <
	string name = "Color 3";
	string field_type = "slider";
	float4 minimum = { 0.0, 0.0, 0.0, 0.0 };
	float4 maximum = { 1.0, 1.0, 1.0, 1.0 };
> = { 1, 1, 1, 1 };

uniform float4 Color4 <
	string name = "Color 4";
	string field_type = "slider";
	float4 minimum = { 0.0, 0.0, 0.0, 0.0 };
	float4 maximum = { 1.0, 1.0, 1.0, 1.0 };
> = { 1, 1, 1, 1 };


uniform float2 Center <
	string name = "Center";
	string field_type = "slider";
	float2 minimum = { 0, 0 };
	float2 maximum = { 1, 1 };
> = { 0.5, 0.5 };

uniform float Rotation <
	string name = "Rotation";
	string field_type = "slider";
	float minimum = -180;
	float maximum = 180;
	float step = 0.01;
> = 0;

uniform float RotationSpeed <
	string name = "Rotation Speed";
	string field_type = "slider";
	float minimum = -720;
	float maximum = 720;
	float step = 0.1;
> = 0;

uniform float Scale <
	string name = "Scale";
	string field_type = "slider";
	float minimum = 0.5;
	float maximum = 10;
	float step = 0.01;
> = 1;

uniform bool MaintainAspect <
	string name = "Maintain Aspect Ratio";
> = false;


// ---------- Shader Code
sampler_state def_sampler {
	AddressU  = Clamp;
	AddressV  = Clamp;
	Filter    = Linear;
};

struct VertData {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

VertData VSDefault(VertData v_in)
{
	VertData vert_out;
	vert_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv = v_in.uv;
	return vert_out;
}





float2 GetUV(float2 uv)
{
	float theta = (Rotation + RotationSpeed * Time.x) / 180 * PI;
	float sinTheta = sin(theta);
	float cosTheta = cos(theta);

	uv -= Center;

	float u = uv.x * cosTheta + uv.y * sinTheta + 0.5;
	float v = uv.x * sinTheta - uv.y * cosTheta + 0.5;

	return float2(u, v);
}

float4 Interpolate2(float t, float4 color0, float4 color1)
{
	return lerp(color0, color1, saturate(t));
}

float4 Interpolate3(float t, float4 color0, float4 color1, float4 color2)
{
	t = saturate(t) * 2;

	float mul0 = step(t, 1);
	float mul1 = step(1, t);

	float t0 = smoothstep(0, 1, t);
	float t1 = smoothstep(0, 1, t - 1);

	float4 color = 
		lerp(color0, color1, t0) * mul0 +
		lerp(color1, color2, t1) * mul1;

	return color;
}

float4 Interpolate4(float t, float4 color0, float4 color1, float4 color2, float4 color3)
{
	t = saturate(t) * 3;

	float mul0 = step(t, 1);
	float mul1 = step(t, 2) * step(1, t);
	float mul2 = step(2, t);

	float t0 = smoothstep(0, 1, t);
	float t1 = smoothstep(0, 1, t - 1);
	float t2 = smoothstep(0, 1, t - 2);

	float4 color =
		lerp(color0, color1, t0) * mul0 +
		lerp(color1, color2, t1) * mul1 +
		lerp(color2, color3, t2) * mul2;

	return color;
}

float4 Interpolate5(float t, float4 color0, float4 color1, float4 color2, float4 color3, float4 color4)
{
	t = saturate(t) * 4;

	float mul0 = step(t, 1);
	float mul1 = step(t, 2) * step(1, t);
	float mul2 = step(t, 3) * step(2, t);
	float mul3 = step(3, t);

	float t0 = smoothstep(0, 1, t);
	float t1 = smoothstep(0, 1, t - 1);
	float t2 = smoothstep(0, 1, t - 2);
	float t3 = smoothstep(0, 1, t - 3);

	float4 color =
		lerp(color0, color1, t0) * mul0 +
		lerp(color1, color2, t1) * mul1 +
		lerp(color2, color3, t2) * mul2 +
		lerp(color3, color4, t3) * mul3;

	return color;
}





float4 PSCorners(VertData v_in) : TARGET
{
	float2 uv = GetUV(v_in.uv);
	float4 hColor = lerp(Color1, Color2, uv.x);
	float4 vColor = lerp(Color3, Color4, uv.x);
	float4 color = lerp(hColor, vColor, uv.y);
	return color;
}


float4 PSLinear2(VertData v_in) : TARGET
{
	float2 uv = GetUV(v_in.uv);
	float4 color = Interpolate2(uv.x, Color1, Color2);
	return color;
}

float4 PSLinear3(VertData v_in) : TARGET
{
	float2 uv = GetUV(v_in.uv);
	float4 color = Interpolate3(uv.x, Color1, Color2, Color3);
	return color;
}

float4 PSLinear4(VertData v_in) : TARGET
{
	float2 uv = GetUV(v_in.uv);
	float4 color = Interpolate4(uv.x, Color1, Color2, Color3, Color4);
	return color;
}



float4 PSRadial2(VertData v_in) : TARGET
{
	float2 uv = GetUV(v_in.uv);
	float t = atan2(uv.y - 0.5, uv.x - 0.5) / PI * 0.5 + 0.5;
	float4 color = Interpolate3(t, Color1, Color2, Color1);
	return color;
}

float4 PSRadial3(VertData v_in) : TARGET
{
	float2 uv = GetUV(v_in.uv);
	float t = atan2(uv.y - 0.5, uv.x - 0.5) / PI * 0.5 + 0.5;
	float4 color = Interpolate4(t, Color1, Color2, Color3, Color1);
	return color;
}

float4 PSRadial4(VertData v_in) : TARGET
{
	float2 uv = GetUV(v_in.uv);
	float t = atan2(uv.y - 0.5, uv.x - 0.5) / PI * 0.5 + 0.5;
	float4 color = Interpolate5(t, Color1, Color2, Color3, Color4, Color1);
	return color;
}



float2 CalculateIrisUV(float2 uv)
{
	if (MaintainAspect)
		uv.x = (uv.x - 0.5) * ViewSize.x / ViewSize.y + 0.5;
	return uv;
}

float4 PSIris2(VertData v_in) : TARGET
{
	float t = distance(v_in.uv, Center) * 2 / Scale;
	float4 color = Interpolate2(t, Color1, Color2);
	return color;
}

float4 PSIris3(VertData v_in) : TARGET
{
	float t = distance(v_in.uv, Center) * 2 / Scale;
	float4 color = Interpolate3(t, Color1, Color2, Color3);
	return color;
}

float4 PSIris4(VertData v_in) : TARGET
{
	float2 uv = CalculateIrisUV(v_in.uv);
	float t = distance(uv, Center) * 2 / Scale;
	float4 color = Interpolate4(t, Color1, Color2, Color3, Color4);
	return color;
}







technique Corners
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader = PSCorners(v_in);
	}
}



technique Linear2
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader = PSLinear2(v_in);
	}
}

technique Linear3
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader = PSLinear3(v_in);
	}
}

technique Linear4
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader = PSLinear4(v_in);
	}
}



technique Radial2
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader = PSRadial2(v_in);
	}
}

technique Radial3
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader = PSRadial3(v_in);
	}
}

technique Radial4
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader = PSRadial4(v_in);
	}
}



technique Iris2
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader = PSIris2(v_in);
	}
}

technique Iris3
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader = PSIris3(v_in);
	}
}

technique Iris4
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader = PSIris4(v_in);
	}
}



