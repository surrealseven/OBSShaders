// Always provided by OBS
uniform float4x4 ViewProj<
	bool automatic = true;
	string name = "View Projection Matrix";
>;

// Provided by Stream Effects
uniform float4 Time<
	bool automatic = true;
	string name = "Time Array";
	string description = "A float4 value containing the total time, rendering time and the time since the last tick. The last value is a random number between 0 and 1.";
>;
uniform float4x4 Random<
	bool automatic = true;
	string name = "Random Array";
	string description = "A float4x4 value containing random values between 0 and 1";
>;
uniform texture2d InputA<
	bool automatic = true;
>;
uniform texture2d InputB<
	bool automatic = true;
>;
uniform float TransitionTime<
	bool automatic = true;
>;
uniform int2 TransitionSize<
	bool automatic = true;
>;

uniform float Sharpness<
	string field_type = "slider";
	string suffix = " %";
	float minimum = 8.0;
	float maximum = 128.0;
	float step = 0.01;
	float scale = 1.0;
> = 10.0;



uniform float NumWaves <
	string field_type = "slider";
	string suffix = "";
	float minimum = 1.0;
	float maximum = 20.0;
	float step = 0.1;
	float scale = 1.0;
> = 5.0;

uniform float Amplitude <
	string field_type = "slider";
	string suffix = "";
	float minimum = 0.0;
	float maximum = 1.0;
	float step = 0.01;
	float scale = 1.0;
> = 0.1;


uniform float FadeDuration <
	string field_type = "slider";
	string suffix = "";
	float minimum = 0.0;
	float maximum = 1.0;
	float step = 0.01;
	float scale = 1.0;
> = 0.25;

uniform float MaxWaveDuration <
	string field_type = "slider";
	string suffix = "";
	float minimum = 0.0;
	float maximum = 1.0;
	float step = 0.01;
	float scale = 1.0;
> = 0.25;

uniform float VerticalClimb <
	string field_type = "slider";
	string suffix = "";
	float minimum = -5;
	float maximum = 5;
	float step = 0.1;
	float scale = 1.0;
> = 1;





// ---------- Shader Code
sampler_state def_sampler {
	AddressU  = Clamp;
	AddressV  = Clamp;
	Filter    = Linear;
};

struct VertData {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

VertData VSDefault(VertData v_in) {
	VertData vert_out;
	vert_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = v_in.uv;
	return vert_out;
}



#define PI 3.14159265359

float4 PSTemplate(VertData v_in) : TARGET{

	float y = v_in.uv.y + TransitionTime * VerticalClimb;
	float phase = sin(y * PI * 2 * NumWaves);

	float start = 0.5f - MaxWaveDuration * 0.5f;
	float end = start + MaxWaveDuration;

	float t = 1.0f;
	if (TransitionTime < start)
		t = 1.0 - (cos(TransitionTime / start * PI) * 0.5f + 0.5f);
	else if (TransitionTime > end)
		t = cos((TransitionTime - end) / start * PI + PI * 2) * 0.5f + 0.5f;

	float x = sin(phase) * t * Amplitude;

	v_in.uv.x += x;

	float4 sampleA = InputA.Sample(def_sampler, v_in.uv);
	float4 sampleB = InputB.Sample(def_sampler, v_in.uv);

	float4 rgba;

	t = saturate((TransitionTime - (0.5f - FadeDuration * 0.5f)) / FadeDuration);
	rgba = lerp(sampleA, sampleB, t);

	return rgba;
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSTemplate(v_in); 
	}
}
