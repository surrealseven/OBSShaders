// include filter shader variables
#include "SrlTransitionEffect.h"


uniform float Sharpness<
	string field_type = "slider";
	string suffix = " %";
	float minimum = 8.0;
	float maximum = 128.0;
	float step = 0.01;
	float scale = 1.0;
> = 10.0;



uniform float NumWaves <
	string name = "Number of Waves";	
	string description = "Number of waves to display simultaneously.";
	string field_type = "slider";
	string suffix = "";
	float minimum = 1.0;
	float maximum = 20.0;
	float step = 0.1;
	float scale = 1.0;
> = 7.5;

uniform float Amplitude <
	string description = "Size of the waves.";
	string field_type = "slider";
	string suffix = "";
	float minimum = 0.0;
	float maximum = 1.0;
	float step = 0.01;
	float scale = 1.0;
> = 0.07;


uniform float FadeDuration <
	string name = "Fade Duration";
	string description = "Percentage of the transition during which the crossfade is applied.";
	string field_type = "slider";
	string suffix = "";
	float minimum = 0.0;
	float maximum = 1.0;
	float step = 0.01;
	float scale = 1.0;
> = 0.4;

uniform float MaxWaveDuration <
	string name = "Maximum Wave Duration";
	string description = "Percentage of the transition where the wave effect stays at full amplitude.";
	string field_type = "slider";
	string suffix = "";
	float minimum = 0.0;
	float maximum = 1.0;
	float step = 0.01;
	float scale = 1.0;
> = 0.16;

uniform float VerticalClimb <
	string name = "Vertical Frequency";
	string description = "Speed at which waves climb the screen vertically.";
	string field_type = "slider";
	string suffix = "";
	float minimum = -2;
	float maximum = 2;
	float step = 0.01;
	float scale = 1.0;
> = 0.75;





// ---------- Shader Code
sampler_state def_sampler {
	AddressU  = Clamp;
	AddressV  = Clamp;
	Filter    = Linear;
};

struct VertData {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

VertData VSDefault(VertData v_in) {
	VertData vert_out;
	vert_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = v_in.uv;
	return vert_out;
}



#define PI 3.14159265359

float4 PSTemplate(VertData v_in) : TARGET
{
	float time = Time.x;
	float y = v_in.uv.y + time * VerticalClimb;
	float phase = sin(y * PI * 2 * NumWaves);

	float start = 0.5f - MaxWaveDuration * 0.5f;
	float t = smoothstep(0.0f, start, TransitionTime) * smoothstep(0.0f, start, 1.0f - TransitionTime);
	float x = sin(phase) * t * Amplitude;

	v_in.uv.x += x;

	float4 sampleA = InputA.Sample(def_sampler, v_in.uv);
	float4 sampleB = InputB.Sample(def_sampler, v_in.uv);

	float4 rgba;

	t = saturate((TransitionTime - (0.5f - FadeDuration * 0.5f)) / FadeDuration);
	rgba = lerp(sampleA, sampleB, t);

	return rgba;
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSTemplate(v_in); 
	}
}
