// include filter shader variables
#include "SrlFilterEffect.h"



uniform int CellSize <
	string name = "Cell Size";
	string field_type = "slider";	
	int minimum = 1;
	int maximum = 128;
> = 20;

uniform float BorderStrength <
	string name = "Border Strength";
	string field_type = "slider";
	float step = 0.01;
	float minimum = 0;
	float maximum = 1;
> = 0.05;

uniform int BorderThickness <
	string name = "Border Thickness";
	string field_type = "slider";
	int minimum = 0;
	int maximum = 64;
> = 1;

uniform float Strength <
	string name = "Strength";
	string field_type = "slider";
	float step = 0.01;
	float minimum = 0;
	float maximum = 1;
> = 1;

uniform float Strength <
	string name = "Strength";
	string field_type = "slider";
	float step = 0.01;
	float minimum = 0;
	float maximum = 1;
> = 1;

uniform float2 P1 <
	string name = "Point 1";
	string field_type = "slider";
	float step = 0.01;
	float2 minimum = { 0.0, 0.0 };
	float2 maximum = { 1.0, 1.0 };
> = { 0.0, 0.0 };

uniform float2 P2 <
	string name = "Point 2";
	string field_type = "slider";
	float step = 0.01;
	float2 minimum = { 0.0, 0.0 };
	float2 maximum = { 1.0, 1.0 };
> = { 1.0, 0.0 };

uniform float2 P3 <
	string name = "Point 3";
	string field_type = "slider";
	float step = 0.01;
	float2 minimum = { 0.0, 0.0 };
	float2 maximum = { 1.0, 1.0 };
> = { 1.0, 1.0 };

uniform float2 P4 <
	string name = "Point 4";
	string field_type = "slider";
	float step = 0.01;
	float2 minimum = { 0.0, 0.0 };
	float2 maximum = { 1.0, 1.0 };
> = { 0.0, 1.0 };




// ---------- Shader Code
sampler_state def_sampler {
	AddressU  = Clamp;
	AddressV  = Clamp;
	Filter    = Linear;
};

struct VertData {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

VertData VSDefault(VertData v_in) 
{
	VertData vert_out;
	vert_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = v_in.uv;
	return vert_out;
}

float4 PSDefault(VertData v_in) : TARGET
{
	float4 color;
	float2 uv = v_in.uv;

	color = InputA.Sample(def_sampler, uv);

	if (PointInQuad(uv, P1, P2, P3, P4))
	{
		float aspect = ViewSize.x / ViewSize.y;
		uv -= 0.5;
		uv.x *= aspect;

		float scale = ViewSize.z * CellSize;
		float2 tileCenter = (floor(uv / scale) + 0.5) * scale;
		float2 tileToTexel = abs(tileCenter - uv);
		tileCenter.x /= aspect;
		tileCenter += 0.5;

		float4 cellColor = InputA.Sample(def_sampler, tileCenter);
		
		float dist = max(tileToTexel.x, tileToTexel.y);
		if (dist > ViewSize.z * (CellSize / 2 - BorderThickness))
			cellColor *= 1 - BorderStrength;

		color = lerp(color, cellColor, Strength);
	}
	

	return color;
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSDefault(v_in); 
	}
}
