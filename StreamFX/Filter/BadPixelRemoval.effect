// include filter shader variables
#include "SrlFilterEffect.h"





// ---------- Shader Code
sampler_state def_sampler {
	AddressU  = Clamp;
	AddressV  = Clamp;
	Filter    = Point;
};

struct VertData {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

VertData VSDefault(VertData v_in) 
{
	VertData vert_out;
	vert_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = v_in.uv;
	return vert_out;
}

float GetLuma(float4 color)
{
	float luma = 0.3 * color.r + 0.59 * color.g + 0.11 * color.b;
	return luma;
}

float4 PSDefault(VertData v_in) : TARGET
{
	float2 uv = v_in.uv + ViewSize.zw;

	float4 color = InputA.Sample(def_sampler, uv);

	float2 offset = float2(ViewSize.z, 0);

	float4 m1 = InputA.Sample(def_sampler, uv - offset);
	float4 p1 = InputA.Sample(def_sampler, uv + offset);	

	offset = float2(0, ViewSize.w);
	float4 m1y = InputA.Sample(def_sampler, uv - offset);
	float4 p1y = InputA.Sample(def_sampler, uv + offset);

	float lc = GetLuma(color);
	float lm1 = GetLuma(m1);
	float lp1 = GetLuma(p1);
	float lm1y = GetLuma(m1y);
	float lp1y = GetLuma(p1y);

	float d0 = lc - lm1;
	float d1 = lp1 - lc;+

	float delta = abs(d0 * d1) * (d0 - d1);
	float d0y = lc - lm1y;
	float d1y = lp1y - lc;
	float deltay = abs(d0y * d1y) * (d0y - d1y);

	float t = delta * deltay * 50000;

	if (t > (1.0 / 255.0))
	{
		// color = float4(1.0, 0.0, 0.0, 1.0);
		color = p1;
	}
	// color.rgb = t;
	

	return color;
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSDefault(v_in); 
	}
}
