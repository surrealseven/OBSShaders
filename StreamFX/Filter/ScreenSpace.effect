// Always provided by OBS
uniform float4x4 ViewProj<
	bool automatic = true;
	string name = "View Projection Matrix";
>;
// Provided by Stream Effects
uniform float4 ViewSize<
	bool automatic = true;
>;
uniform texture2d InputA<
	bool automatic = true;
>;
uniform float4x4 Random
<
	bool automatic = true; 
>;


uniform float LedSize <
	string name = "Led Size";
	string field_type = "slider";
	float minimum = 1.0;
	float maximum = 100.0;
	float step = 1.0;
> = 16.0;

uniform float LedFatness <
	string name = "Led Fatness";
	string field_type = "slider";
	float minimum = 0.25;
	float maximum = 5.0;
	float step = 0.01;
> = 1.0;

uniform int IntensitySteps <
	string name = "Intensity Steps";
	string field_type = "slider";
	int minimum = 0;
	int maximum = 255;
> = 3;

uniform float Brightness <
	string field_type = "slider";
	float minimum = 0.0;
	float maximum = 5.0;
	float step = 0.1;
> = 1.0;

uniform float Contrast <
	string field_type = "slider";
	float minimum = 0;
	float maximum = 5.0;
> = 1.0;

uniform float Fade <
	string field_type = "slider";
	float minimum = 0.0;
	float maximum = 1.0;
> = 1.0;

uniform bool Monochrome = true;
uniform bool Smooth = false;

uniform float4 UnlitColor <
	string name = "Unlit Color";
	float minimum = 0.0;
	float maximum = 1.0;
> = { 0.1, 0.025, 0.0, 1.0 };

uniform float4 LitColor <
	string name = "Lit Color";
	float minimum = 0.0;
	float maximum = 1.0;
> = { 1.0, 0.25, 0.0, 1.0 };

uniform float4 BackgroundColor <
	string name = "Background Color";
	float minimum = 0.0;
	float maximum = 1.0;
> = { 0.0, 0.0, 0.0, 1.0 };



// ---------- Shader Code
sampler_state def_sampler {
	AddressU  = Clamp;
	AddressV  = Clamp;
	Filter    = Linear;
};

struct VertData {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

VertData VSDefault(VertData v_in) 
{
	VertData vert_out;
	vert_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = v_in.uv;
	return vert_out;
}

float4 PSDefault(VertData v_in) : TARGET 
{
	// get the color in the middle of the screen tile
	float4 color = InputA.Sample(def_sampler, v_in.uv);

	float4 perInst = float4(Random[0][0], Random[1][0], Random[2][0], Random[3][0]);
	float4 perActivation = float4(Random[0][1], Random[1][1], Random[2][1], Random[3][1]);
//float4 perFrame1 = float4(Random[0][2], Random[1][2], Random[2][2], Random[3][2]);
//float4 perFrame2 = float4(Random[0][3], Random[1][3], Random[2][3], Random[3][3]);

   // if (v_in.uv.x * ViewSize.x < 100)
	if (v_in.pos.x / v_in.pos.w < 100)
		color = float4(perActivation.xyz, 1.0);


	return color;
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSDefault(v_in); 
	}
}
