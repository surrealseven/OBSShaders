// include filter shader variables
#include "SrlFilterEffect.h"




uniform float BorderPixels <
	string field_type = "slider";
	string name = "Border Width";
	float minimum = 0.0;
	float maximum = 150.0;
> = 16.0;

uniform float4 BorderColor <
	string name = "Border Color";
	string field_type = "slider";
	float4 minimum = { 0.0, 0.0, 0.0, 0.0 };
	float4 maximum = { 1.0, 1.0, 1.0, 1.0 };
> = { 1.0, 0.25, 0.0, 1.0 };

uniform float4 BackgroundColor <
	string name = "Background Color";
	string field_type = "slider";
	float4 minimum = { 0.0, 0.0, 0.0, 0.0 };
	float4 maximum = { 1.0, 1.0, 1.0, 1.0 };
> = { 0.0, 0.0, 0.0, 0.0 };

uniform texture2d BorderTexture <
	string name = "Border Texture";
	string field_type = "input";
	bool automatic = false;
>;

uniform float BorderAlpha <
	string field_type = "slider";
	float minimum = 0.0;
	float maximum = 1.0;
> = 1.0;

uniform float CornerRadius <
	string field_type = "slider";
	float minimum = 0.0;
	float maximum = 600.0;
> = 50.0;

uniform bool FitContent = true;


// ---------- Shader Code
sampler_state def_sampler {
	AddressU  = Clamp;
	AddressV  = Clamp;
	Filter    = Linear;
};

struct VertData {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

VertData VSDefault(VertData v_in) 
{
	VertData vert_out;
	vert_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = v_in.uv;
	return vert_out;
}

float3 CalculateColorContributions(VertData v_in)
{
	float cornerRadius = min(CornerRadius, min(ViewSize.x, ViewSize.y) * 0.5);

	// fold over the the texture coordinates in both directions so we can do all of
	// the region calculations for a single corner.  this gives us a range of 0 to 1
	// where 0,0 is the rounded corner, and 1,1 is fully within the border.
	float2 uv = 0.5 - abs(v_in.uv - 0.5);

	float2 pos = uv * ViewSize.xy;
	// pos.x *= ViewSize.x / ViewSize.y;  // <-- applying aspect ratio or not seems to be dependent on the type of transform applied to the source

	// first calculate alpha which will define the outer shape
	float2 radiusCenter = max(pos, cornerRadius);
	float dist = distance(radiusCenter, pos);
	float alpha = smoothstep(dist - 1, dist, cornerRadius);

	// calculate the border that follows the corner radius and the rectangular border.  combine
	// these two to determine what is content and what is border
	float cornerBorder = smoothstep(dist - 1, dist, max(cornerRadius - BorderPixels, 1));
	float innerBorder = (smoothstep(BorderPixels - 1, BorderPixels, pos.x) *
		smoothstep(BorderPixels - 1, BorderPixels, pos.y));
	float contentMultiplier = cornerBorder * innerBorder;
	float borderMultiplier = 1 - contentMultiplier;

	return float3(contentMultiplier, borderMultiplier, alpha);
}

float4 PSBorderTexture(VertData v_in) : TARGET
{
	float3 contributions = CalculateColorContributions(v_in);

	float4 borderColor = BorderTexture.Sample(def_sampler, v_in.uv) * contributions.y;
	borderColor.a *= BorderAlpha;
	float4 color = InputA.Sample(def_sampler, v_in.uv);
	float4 bgColor = BackgroundColor;
	color = lerp(bgColor, color, color.a) * contributions.x;
	color = color + borderColor;
	
	color.a *= contributions.z;

	return color;
}

float4 PSBorderColor(VertData v_in) : TARGET
{
	float3 contributions = CalculateColorContributions(v_in);

	float4 borderColor = BorderColor * contributions.y;
	float4 color = InputA.Sample(def_sampler, v_in.uv);
	float4 bgColor = BackgroundColor;
	color = lerp(bgColor, color, color.a) * contributions.x;
	color = color + borderColor;

	color.a *= contributions.z;

	return color;
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSBorderColor(v_in);
	}
}

technique DrawTexture
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader = PSBorderTexture(v_in);
	}
}
