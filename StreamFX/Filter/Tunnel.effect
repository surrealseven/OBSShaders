// Always provided by OBS
uniform float4x4 ViewProj<
	bool automatic = true;
string name = "View Projection Matrix";
> ;

// Provided by Stream Effects
uniform float4 Time<
	// x: Time in seconds since the source was created.
	// y: Time in the current second.
	// z: Total seconds passed since the source was created.
	// w: Reserved
	bool automatic = true;
string name = "Time Array";
string description = "A float4 value containing the total time, rendering time and the time since the last tick. The last value is a random number between 0 and 1.";
> ;

uniform float4 ViewSize<
	// x: Width
	// y: Height
	// z: 1. / Width
	// w: 1. / Height
	bool automatic = true;
> ;

uniform float4x4 Random<
	bool automatic = true;
string name = "Random Array";
string description = "A float4x4 value containing random values between 0 and 1";
> ;

//float4 perInst = float4(Random[0][0], Random[1][0], Random[2][0], Random[3][0]);
//float4 perActivation = float4(Random[0][1], Random[1][1], Random[2][1], Random[3][1]);
//float4 perFrame1 = float4(Random[0][2], Random[1][2], Random[2][2], Random[3][2]);
//float4 perFrame2 = float4(Random[0][3], Random[1][3], Random[2][3], Random[3][3]);

uniform texture2d InputA<
	bool automatic = true;
> ;


#define PI		3.14159265359









//
//
//// Created by inigo quilez - iq/2013
//// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.
//
//void mainImage(out vec4 fragColor, in vec2 fragCoord)
//{
//	vec2 p = (-iResolution.xy + 2.0 * fragCoord) / iResolution.x;
//
//	float r2 = dot(p, p);
//	float r = sqrt(r2);
//
//#if 1
//	// fancy
//	float a = atan(p.y, p.x);
//	a += sin(2.0 * r) - 3.0 * cos(2.0 + 0.1 * iTime);
//	vec2 uv = vec2(cos(a), sin(a)) / r;
//#else
//	// traditional
//	vec2 uv = p / r2;
//#endif	
//
//	// animate	
//	uv += 10.0 * cos(vec2(0.6, 0.3) + vec2(0.1, 0.13) * iTime);
//
//	vec3 col = r * texture(iChannel0, uv * .25).xyz;
//
//	fragColor = vec4(col, 1.0);
//}





// ---------- Shader Code
sampler_state def_sampler{
	AddressU = Clamp;
	AddressV = Clamp;
	Filter = Linear;
};

struct VertData {
	float4 pos : POSITION;
	float2 uv : TEXCOORD0;
};

VertData VSDefault(VertData v_in)
{
	VertData vert_out;
	vert_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv = v_in.uv;
	return vert_out;
}

float4 PSDefault(VertData v_in) : TARGET
{
	float4 color = InputA.Sample(def_sampler, v_in.uv);


	return color;
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader = PSDefault(v_in);
	}
}
