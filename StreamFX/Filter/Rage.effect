// include filter shader variables
#include "SrlFilterEffect.h"



//float4 perInst = float4(Random[0][0], Random[1][0], Random[2][0], Random[3][0]);
//float4 perActivation = float4(Random[0][1], Random[1][1], Random[2][1], Random[3][1]);
//float4 perFrame1 = float4(Random[0][2], Random[1][2], Random[2][2], Random[3][2]);
//float4 perFrame2 = float4(Random[0][3], Random[1][3], Random[2][3], Random[3][3]);


uniform float XScale <
	string name = "Horizontal Scale";
	string field_type = "slider";
	float step = 1;
	float minimum = 0;
	float maximum = 512;
> = 0;

uniform float YScale <
	string name = "Vertical Scale";
	string field_type = "slider";
	float step = 1;
	float minimum = 0;
	float maximum = 512;
> = 0;

uniform float Redness <
	string name = "Redness";
	string field_type = "slider";
	float step = 0.01;
	float minimum = 0;
	float maximum = 1;
> = 0.8;

#define BORDERTYPE_NONE		0
#define BORDERTYPE_WRAP		1
#define BORDERTYPE_CLAMP	2
#define BORDERTYPE_MIRROR	3

uniform int BorderType <
	string name = "Border Type";
	string field_type = "enum";
	int enum_0 = BORDERTYPE_NONE;
	string enum_0_name = "None";
	int enum_1 = BORDERTYPE_WRAP;
	string enum_1_name = "Wrap";
	int enum_2 = BORDERTYPE_CLAMP;
	string enum_2_name = "Clamp";	
	int enum_3 = BORDERTYPE_MIRROR;
	string enum_3_name = "Mirror";
> = 0;


// ---------- Shader Code
sampler_state def_sampler {
	AddressU  = Clamp;
	AddressV  = Clamp;
	Filter    = Linear;
};

struct VertData {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

VertData VSDefault(VertData v_in) 
{
	VertData vert_out;
	vert_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = v_in.uv;
	return vert_out;
}

float4 PSDefault(VertData v_in) : TARGET
{
	float4 rand = float4(Random[0][2], Random[1][2], Random[2][2], Random[3][2]);
	
	float2 offset = (rand.xy * 2 - 1) * float2(XScale , YScale);

	float2 uv = v_in.uv + offset * ViewSize.zw;

	if (BorderType == BORDERTYPE_WRAP)
		uv = frac(uv);
	else if (BorderType == BORDERTYPE_CLAMP)
		uv = saturate(uv);
	else if (BorderType == BORDERTYPE_MIRROR)
		uv = abs(abs(uv - 1) - 1);

	float clip = step(0, uv.x) * step(uv.x, 1) * step(0, uv.y) * step(uv.y, 1);

	float4 color = InputA.Sample(def_sampler, uv) * clip;

	float luma = RgbToLuma(color.rgb);
	float3 red = float3(luma, 0, 0);
	color.rgb = lerp(color.rgb, red, Redness);

	return color;
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSDefault(v_in); 
	}
}
