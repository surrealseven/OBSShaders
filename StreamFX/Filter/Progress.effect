// Always provided by OBS
uniform float4x4 ViewProj<
	bool automatic = true;
	string name = "View Projection Matrix";
>;

// Provided by Stream Effects
uniform float4 Time<
	// x: Time in seconds since the source was created.
	// y: Time in the current second.
	// z: Total seconds passed since the source was created.
	// w: Reserved
	bool automatic = true;
	string name = "Time Array";
	string description = "A float4 value containing the total time, rendering time and the time since the last tick. The last value is a random number between 0 and 1.";
>;

uniform float4 ViewSize<
	// x: Width
	// y: Height
	// z: 1. / Width
	// w: 1. / Height
	bool automatic = true;
>;

uniform float4x4 Random<
	bool automatic = true;
	string name = "Random Array";
	string description = "A float4x4 value containing random values between 0 and 1";
>;

//float4 perInst = float4(Random[0][0], Random[1][0], Random[2][0], Random[3][0]);
//float4 perActivation = float4(Random[0][1], Random[1][1], Random[2][1], Random[3][1]);
//float4 perFrame1 = float4(Random[0][2], Random[1][2], Random[2][2], Random[3][2]);
//float4 perFrame2 = float4(Random[0][3], Random[1][3], Random[2][3], Random[3][3]);

uniform texture2d InputA<
	bool automatic = true;
>;


#define PI		3.14159265359

uniform float Progress <
	string name = "Progress";
	string field_type = "slider";
	float step = 0.01;
	float minimum = 0;
	float maximum = 1;
> = 1;

uniform float4 BackgroundColor <
	string name = "Background Color";
	string field_type = "slider";
	float4 minimum = { 0.0, 0.0, 0.0, 0.0 };
	float4 maximum = { 1.0, 1.0, 1.0, 1.0 };
> = { 0.0, 0.0, 0.0, 0.0 };


// ---------- Shader Code
sampler_state def_sampler {
	AddressU  = Clamp;
	AddressV  = Clamp;
	Filter    = Linear;
};

struct VertData {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

VertData VSDefault(VertData v_in) 
{
	VertData vert_out;
	vert_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = v_in.uv;
	return vert_out;
}

float4 PSSwipe(VertData v_in) : TARGET 
{	
	float4 color = InputA.Sample(def_sampler, v_in.uv);

	float clip = step(v_in.uv.x, Progress);
	color *= clip;
	color += BackgroundColor * (1 - clip);

	return color;
}

float4 PSSlide(VertData v_in) : TARGET
{
	float2 uv = v_in.uv + (1 - Progress);

	float4 color = InputA.Sample(def_sampler, uv);

	float clip = step(uv.x, 1);
	color *= clip;
	color += BackgroundColor * (1 - clip);

	return color;
}



technique Swipe
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSSwipe(v_in); 
	}
}

technique Slide
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader = PSSlide(v_in);
	}
}
