// include filter shader variables
#include "SrlFilterEffect.h"



uniform float Progress <
	string name = "Progress";
	string field_type = "slider";
	float step = 0.01;
	float minimum = 0;
	float maximum = 1;
> = 1;

uniform float Smooth <
	string name = "Smoothing";
	string field_type = "slider";
	float step = 0.01;
	float minimum = 0;
	float maximum = 1;
> = 0;

uniform bool Reverse <
> = false;

uniform float4 BackgroundColor <
	string name = "Background Color";
	string field_type = "slider";
	float4 minimum = { 0.0, 0.0, 0.0, 0.0 };
	float4 maximum = { 1.0, 1.0, 1.0, 1.0 };
> = { 0.0, 0.0, 0.0, 0.0 };


// ---------- Shader Code
sampler_state def_sampler {
	AddressU  = Clamp;
	AddressV  = Clamp;
	Filter    = Linear;
};

struct VertData {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

VertData VSDefault(VertData v_in) 
{
	VertData vert_out;
	vert_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = v_in.uv;
	return vert_out;
}

float4 CalculateColor(float2 uv, float progress)
{
	if (Reverse)
		progress = 1.0 - progress;
	float4 color = InputA.Sample(def_sampler, uv);
	float t = smoothstep(Progress, Progress + Smooth * 0.25, progress);
	color = lerp(color, BackgroundColor, t);
	return color;
}


float4 PSSwipeX(VertData v_in) : TARGET
{
	return CalculateColor(v_in.uv, v_in.uv.x);
}

float4 PSSwipeY(VertData v_in) : TARGET
{
	return CalculateColor(v_in.uv, 1.0 - v_in.uv.y);
}

float4 PSSlideX(VertData v_in) : TARGET
{
	float2 uv = v_in.uv;
	uv.x += (Reverse) ? Progress - 1 : 1 - Progress;
	return CalculateColor(uv, v_in.uv.x);
}

float4 PSSlideY(VertData v_in) : TARGET
{
	float2 uv = v_in.uv;
	uv.y += (Reverse) ? 1 - Progress : Progress - 1;
	return CalculateColor(uv, 1 - v_in.uv.y);
}





technique SwipeX
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSSwipeX(v_in); 
	}
}

technique SwipeY
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader = PSSwipeY(v_in);
	}
}

technique SlideX
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader = PSSlideX(v_in);
	}
}


technique SlideY
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader = PSSlideY(v_in);
	}
}
