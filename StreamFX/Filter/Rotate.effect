// include filter shader variables
#include "SrlFilterEffect.h"



uniform float CenterX <
	string name = "Center X";
	string field_type = "slider";
	float step = 0.01;
	float minimum = 0;
	float maximum = 1;
> = 0.5;

uniform float CenterY <
	string name = "Center Y";
	string field_type = "slider";
	float step = 0.01;
	float minimum = 0;
	float maximum = 1;
> = 0.5;

uniform float Phase <
	string name = "Rotation";
	string field_type = "slider";
	float step = 0.01;
	float minimum = 0;
	float maximum = 360;
> = 0.5;

uniform float Speed <
	string name = "Rotation Speed";
	string field_type = "slider";
	float step = 0.01;
	float minimum = -180;
	float maximum = 180;
> = 0;

uniform float WobbleSpeed <
	string name = "Wobble Speed";
	string field_type = "slider";
	float step = 0.01;
	float minimum = 0;
	float maximum = 2;
> = 1;

uniform float WobbleStrength <
	string name = "Wobble Strength";
	string field_type = "slider";
	float step = 0.01;
	float minimum = 0;
	float maximum = 360;
> = 0;


#define BORDERTYPE_NONE		0
#define BORDERTYPE_WRAP		1
#define BORDERTYPE_CLAMP	2

uniform int BorderType <
	string name = "Border Type";
	string field_type = "enum";
	int enum_0 = BORDERTYPE_NONE;
	string enum_0_name = "None";
	int enum_1 = BORDERTYPE_WRAP;
	string enum_1_name = "Wrap";
	int enum_2 = BORDERTYPE_CLAMP;
	string enum_2_name = "Clamp";	
> = 0;


// ---------- Shader Code
sampler_state def_sampler {
	AddressU  = Clamp;
	AddressV  = Clamp;
	Filter    = Linear;
};

struct VertData {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

VertData VSDefault(VertData v_in) 
{
	VertData vert_out;
	vert_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = v_in.uv;
	return vert_out;
}

#define PI		3.14159265359
#define DEG2RAD PI / 180

float4 PSDefault(VertData v_in) : TARGET
{	
	float theta = frac(Time.x * Speed) * PI * 2;
	theta += (sin(Time.x * WobbleSpeed * PI * 2) * WobbleStrength - Phase) * DEG2RAD;

	float s, c;
	sincos(theta, s, c);

	float2 center = float2(CenterX, CenterY);
	float2 uv = v_in.uv;
	
	uv = (uv - center) * ViewSize.xy;
	uv = float2(c * uv.x - s * uv.y, s * uv.x + c * uv.y);
	uv = uv * ViewSize.zw + center;

	if (BorderType == BORDERTYPE_WRAP)
		uv = frac(uv);
	else if (BorderType == BORDERTYPE_CLAMP)
		uv = saturate(uv);

	float clip = step(0, uv.x) * step(uv.x, 1) * step(0, uv.y) * step(uv.y, 1);

	float4 color = InputA.Sample(def_sampler, uv) * clip;

	return color;
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSDefault(v_in); 
	}
}
