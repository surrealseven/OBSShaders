// Always provided by OBS
uniform float4x4 ViewProj<
	bool automatic = true;
	string name = "View Projection Matrix";
>;
// Provided by Stream Effects

uniform float4 Time<
	// x: Time in seconds since the source was created.
	// y: Time in the current second.
	// z: Total seconds passed since the source was created.
	// w: Reserved
	bool automatic = true;
	string name = "Time Array";
	string description = "A float4 value containing the total time, rendering time and the time since the last tick. The last value is a random number between 0 and 1.";
> ;
uniform float4 ViewSize<
	// x: Width
	// y: Height
	// z: 1. / Width
	// w: 1. / Height
	bool automatic = true;
> ;
uniform texture2d InputA<
	bool automatic = true;
> ;
uniform float4x4 Random<
	bool automatic = true;
	string name = "Random Array";
	string description = "A float4x4 value containing random values between 0 and 1";
> ;

//float4 perInst = float4(Random[0][0], Random[1][0], Random[2][0], Random[3][0]);
//float4 perActivation = float4(Random[0][1], Random[1][1], Random[2][1], Random[3][1]);
//float4 perFrame1 = float4(Random[0][2], Random[1][2], Random[2][2], Random[3][2]);
//float4 perFrame2 = float4(Random[0][3], Random[1][3], Random[2][3], Random[3][3]);

uniform float XFrequency <
	string name = "Horizontal Frequency";
	string field_type = "slider";
	float step = 0.01;
	float minimum = 0;
	float maximum = 100;
> = 1;

uniform float XScale <
	string name = "Horizontal Scale";
	string field_type = "slider";
	float step = 1;
	float minimum = 0;
	float maximum = 512;
> = 1;

uniform float XPhase <
	string name = "Horizontal Phase";
	string field_type = "slider";
	float step = 0.01;
	float minimum = 0;
	float maximum = 1;
> = 1;

uniform float YFrequency <
	string name = "Vertical Frequency";
	string field_type = "slider";
	float step = 0.01;
	float minimum = 0;
	float maximum = 100;
> = 1;

uniform float YScale <
	string name = "Vertical Scale";
	string field_type = "slider";
	float step = 1;
	float minimum = 0;
	float maximum = 512;
> = 1;

uniform float YPhase <
	string name = "Vertical Phase";
	string field_type = "slider";
	float step = 0.01;
	float minimum = 0;
	float maximum = 1;
> = 1;


uniform float XNoiseScale <
	string name = "Horizontal Noise Scale";
	string field_type = "slider";
	float step = 1;
	float minimum = 0;
	float maximum = 512;
> = 0;

uniform float YNoiseScale <
	string name = "Vertical Noise Scale";
	string field_type = "slider";
	float step = 1;
	float minimum = 0;
	float maximum = 512;
> = 0;

#define BORDERTYPE_NONE		0
#define BORDERTYPE_WRAP		1
#define BORDERTYPE_CLAMP	2
#define BORDERTYPE_MIRROR	3

uniform int BorderType <
	string name = "Border Type";
	string field_type = "enum";
	int enum_0 = BORDERTYPE_NONE;
	string enum_0_name = "None";
	int enum_1 = BORDERTYPE_WRAP;
	string enum_1_name = "Wrap";
	int enum_2 = BORDERTYPE_CLAMP;
	string enum_2_name = "Clamp";	
	int enum_3 = BORDERTYPE_MIRROR;
	string enum_3_name = "Mirror";
> = 0;



#define PI 3.14159265359


// ---------- Shader Code
sampler_state def_sampler {
	AddressU  = Clamp;
	AddressV  = Clamp;
	Filter    = Linear;
};

struct VertData {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

VertData VSDefault(VertData v_in) 
{
	VertData vert_out;
	vert_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = v_in.uv;
	return vert_out;
}

float4 PSDefault(VertData v_in) : TARGET
{
	float4 rand = float4(Random[0][2], Random[1][2], Random[2][2], Random[3][2]);

	float2 offset = 0;

	offset.x += sin(Time.x * XFrequency + XPhase * PI * 2) * XScale;
	offset.y += cos(Time.x * YFrequency + YPhase * PI * 2) * YScale;

	offset += (rand.xy * 2 - 1) * float2(XNoiseScale , YNoiseScale);

	float2 uv = v_in.uv + offset * ViewSize.zw;

	if (BorderType == BORDERTYPE_WRAP)
		uv = frac(uv);
	else if (BorderType == BORDERTYPE_CLAMP)
		uv = saturate(uv);
	else if (BorderType == BORDERTYPE_MIRROR)
		uv = abs(abs(uv - 1) - 1);

	float clip = step(0, uv.x) * step(uv.x, 1) * step(0, uv.y) * step(uv.y, 1);

	float4 color = InputA.Sample(def_sampler, uv) * clip;

	return color;
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSDefault(v_in); 
	}
}
