// Always provided by OBS
uniform float4x4 ViewProj<
	bool automatic = true;
	string name = "View Projection Matrix";
>;

// Provided by Stream Effects
uniform float4 Time<
	// x: Time in seconds since the source was created.
	// y: Time in the current second.
	// z: Total seconds passed since the source was created.
	// w: Reserved
	bool automatic = true;
	string name = "Time Array";
	string description = "A float4 value containing the total time, rendering time and the time since the last tick. The last value is a random number between 0 and 1.";
>;

uniform float4 ViewSize<
	// x: Width
	// y: Height
	// z: 1. / Width
	// w: 1. / Height
	bool automatic = true;
>;

uniform float4x4 Random<
	bool automatic = true;
	string name = "Random Array";
	string description = "A float4x4 value containing random values between 0 and 1";
>;

//float4 perInst = float4(Random[0][0], Random[1][0], Random[2][0], Random[3][0]);
//float4 perActivation = float4(Random[0][1], Random[1][1], Random[2][1], Random[3][1]);
//float4 perFrame1 = float4(Random[0][2], Random[1][2], Random[2][2], Random[3][2]);
//float4 perFrame2 = float4(Random[0][3], Random[1][3], Random[2][3], Random[3][3]);

uniform texture2d InputA<
	bool automatic = true;
>;


#define PI		3.14159265359


uniform float4 BackgroundColor <
	string name = "Background Color";
	string field_type = "slider";
	float4 minimum = { 0, 0, 0, 0 };
	float4 maximum = { 1, 1, 1, 1 };
> = { 1.0, 1.0, 1.0, 1.0 };

uniform float Spread <
	string field_type = "slider";
	float minimum = 0.0;
	float maximum = 5.0;
	float step = 0.1;
> = 1.5;

uniform float LowThreshold <
	string name = "Low Threshold";
	string field_type = "slider";
	float minimum = 0.0;
	float maximum = 1.0;
	float step = 0.01;
> = 0.0;

uniform float HighThreshold <
	string name = "High Threshold";
	string field_type = "slider";
	float minimum = 0.0;
	float maximum = 1.0;
	float step = 0.01;
> = 1.0;

uniform float EdgeBias <
	string name = "Edge Bias";
	string field_type = "slider";
	float minimum = 1.0;
	float maximum = 5.0;
	float step = 0.01;
> = 3.0;

uniform float Fade <
	string field_type = "slider";
	float minimum = 0.0;
	float maximum = 1.0;
	float step = 0.01;
> = 0.1;

uniform float AlphaFade <
	string name = "Alpha Fade";
	string field_type = "slider";
	float minimum = 0.0;
	float maximum = 1.0;
	float step = 0.01;
> = 0.0;

uniform float Desaturation <
	string field_type = "slider";
	float minimum = 0.0;
	float maximum = 1.0;
	float step = 0.01;
> = 0.0;

// ---------- Shader Code
sampler_state def_sampler {
	AddressU  = Clamp;
	AddressV  = Clamp;
	Filter    = Linear;
};

struct VertData {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

VertData VSDefault(VertData v_in) 
{
	VertData vert_out;
	vert_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = v_in.uv;
	return vert_out;
}

float4 PSDefault(VertData v_in) : TARGET
{
	float2 center = v_in.uv;
	float2 range = ViewSize.zw * Spread;


	float4 realColor = InputA.Sample(def_sampler, v_in.uv);

	float4 h = InputA.Sample(def_sampler, center + float2(range.x, 0)) -
			   InputA.Sample(def_sampler, center - float2(range.x, 0));
	float4 v = InputA.Sample(def_sampler, center + float2(0, range.y)) -
			   InputA.Sample(def_sampler, center - float2(0, range.y));

	float4 color = 1.0 - max(abs(h), abs(v));

	float luma = 0.3 * color.r + 0.59 * color.g + 0.11 * color.b;	
	luma = smoothstep(LowThreshold, HighThreshold, luma);
	luma = pow(luma, EdgeBias);

	color = lerp(realColor, BackgroundColor, luma);
	color = lerp(color, luma, Desaturation);
	
	color = lerp(color, realColor, Fade);
	color.a = lerp(1, realColor.a, AlphaFade);

	return color;
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSDefault(v_in); 
	}
}
