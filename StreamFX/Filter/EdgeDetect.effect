// include filter shader variables
#include "SrlFilterEffect.h"




uniform float4 BackgroundColor <
	string name = "Background Color";
	string field_type = "slider";
	float4 minimum = { 0, 0, 0, 0 };
	float4 maximum = { 1, 1, 1, 1 };
> = { 1.0, 1.0, 1.0, 1.0 };

uniform float Spread <
	string field_type = "slider";
	float minimum = 0.0;
	float maximum = 5.0;
	float step = 0.1;
> = 1.5;

uniform float LowThreshold <
	string name = "Low Threshold";
	string field_type = "slider";
	float minimum = 0.0;
	float maximum = 1.0;
	float step = 0.01;
> = 0.0;

uniform float HighThreshold <
	string name = "High Threshold";
	string field_type = "slider";
	float minimum = 0.0;
	float maximum = 1.0;
	float step = 0.01;
> = 1.0;

uniform float EdgeBias <
	string name = "Edge Bias";
	string field_type = "slider";
	float minimum = 1.0;
	float maximum = 5.0;
	float step = 0.01;
> = 3.0;

uniform float Fade <
	string field_type = "slider";
	float minimum = 0.0;
	float maximum = 1.0;
	float step = 0.01;
> = 0.1;

uniform float AlphaFade <
	string name = "Alpha Fade";
	string field_type = "slider";
	float minimum = 0.0;
	float maximum = 1.0;
	float step = 0.01;
> = 0.0;

uniform float Desaturation <
	string field_type = "slider";
	float minimum = 0.0;
	float maximum = 1.0;
	float step = 0.01;
> = 0.0;

// ---------- Shader Code
sampler_state def_sampler {
	AddressU  = Clamp;
	AddressV  = Clamp;
	Filter    = Linear;
};

struct VertData {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

VertData VSDefault(VertData v_in) 
{
	VertData vert_out;
	vert_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = v_in.uv;
	return vert_out;
}

float4 PSDefault(VertData v_in) : TARGET
{
	float2 center = v_in.uv;
	float2 range = ViewSize.zw * Spread;


	float4 realColor = InputA.Sample(def_sampler, v_in.uv);

	float4 h = InputA.Sample(def_sampler, center + float2(range.x, 0)) -
			   InputA.Sample(def_sampler, center - float2(range.x, 0));
	float4 v = InputA.Sample(def_sampler, center + float2(0, range.y)) -
			   InputA.Sample(def_sampler, center - float2(0, range.y));

	float4 color = 1.0 - max(abs(h), abs(v));

	float luma = RgbToLuma(color.rgb);
	luma = smoothstep(LowThreshold, HighThreshold, luma);
	luma = pow(luma, EdgeBias);

	color = lerp(realColor, BackgroundColor, luma);
	color = lerp(color, luma, Desaturation);
	
	color = lerp(color, realColor, Fade);
	color.a = lerp(1, realColor.a, AlphaFade);

	return color;
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSDefault(v_in); 
	}
}
