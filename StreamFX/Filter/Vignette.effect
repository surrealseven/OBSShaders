// include filter shader variables
#include "SrlFilterEffect.h"



uniform float InnerRadius <
	string name = "Inner Radius";
	string field_type = "slider";
	float minimum = 0;
	float maximum = 2.0;
	float step = 0.01;
> = 0.1;

uniform float OuterRadius <
	string name = "Outer Radius";
	string field_type = "slider";
	float minimum = 0;
	float maximum = 5.0;
	float step = 0.01;
> = 0.9;

uniform bool Circular <
	string name = "Circular";	
> = false;

uniform float4 VignetteColor<
	string name = "Color";
	string field_type = "slider";
	float4 minimum = { 0.0, 0.0, 0.0, 0.0 };
	float4 maximum = { 1.0, 1.0, 1.0, 1.0 };
	float4 step = { 0.01, 0.01, 0.01, 0.01 };
> = { 0.0, 0.0, 0.0, 1.0 };


#define PI		3.14159265359





// ---------- Shader Code
sampler_state def_sampler {
	AddressU  = Clamp;
	AddressV  = Clamp;
	Filter    = Linear;
};

struct VertData {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

VertData VSDefault(VertData v_in) 
{
	VertData vert_out;
	vert_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = v_in.uv;
	return vert_out;
}

float4 PSDefault(VertData v_in) : TARGET 
{	
	float4 color = InputA.Sample(def_sampler, v_in.uv);

	float2 center = float2(0, 0);
	float2 pos = v_in.uv - 0.5;

	if (Circular)
		pos.x *= ViewSize.x / ViewSize.y;

	float dist = distance(pos, center);

	float t = smoothstep(InnerRadius, OuterRadius, dist);

	color = lerp(color, VignetteColor, t);

	return color;
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSDefault(v_in); 
	}
}
